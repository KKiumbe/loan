generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  tenantId  Int
  userId    Int
  action    String
  resource  String
  details   Json
  createdAt DateTime @default(now())
  Tenant    Tenant   @relation(fields: [tenantId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model B2BTransfer {
  id                       Int       @id @default(autoincrement())
  tenantId                 Int
  amount                   Float
  partyA                   String
  partyB                   String
  commandID                String
  remarks                  String?
  occasion                 String?
  conversationID           String?
  originatorConversationID String?   @unique
  transactionID            String?
  resultCode               Int?
  resultDesc               String?
  status                   B2BStatus @default(PENDING)
  createdAt                DateTime  @default(now())
  updatedAt                DateTime
  Tenant                   Tenant    @relation(fields: [tenantId], references: [id])
}

model ConsolidatedRepayment {
  id             Int          @id @default(autoincrement())
  organizationId Int
  totalAmount    Float?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  paidAt         DateTime?
  tenantId       Int
  status         String?
  amount         Float
  userId         Int
  Organization   Organization @relation(fields: [organizationId], references: [id])
  Tenant         Tenant       @relation(fields: [tenantId], references: [id])
  User           User         @relation(fields: [userId], references: [id])
  Loan           Loan[]
}

model Employee {
  id                   Int          @id @default(autoincrement())
  phoneNumber          String       @unique
  idNumber             String       @unique
  firstName            String
  lastName             String
  grossSalary          Float
  jobId                String?
  secondaryPhoneNumber String?
  tenantId             Int
  organizationId       Int
  createdAt            DateTime     @default(now())
  updatedAt            DateTime
  Organization         Organization @relation(fields: [organizationId], references: [id])
  Tenant               Tenant       @relation(fields: [tenantId], references: [id])
  User                 User?
}

model Loan {
  id                       Int                    @id @default(autoincrement())
  organizationId           Int
  amount                   Float
  createdAt                DateTime               @default(now())
  updatedAt                DateTime
  userId                   Int
  tenantId                 Int
  approvalCount            Int                    @default(0)
  consolidatedRepaymentId  Int?
  dueDate                  DateTime
  duration                 Int                    @default(30)
  firstApproverId          Int?
  interestRate             Float
  mpesaStatus              String?
  mpesaTransactionId       String?
  secondApproverId         Int?
  thirdApproverId          Int?
  totalRepayable           Float
  status                   LoanStatus             @default(PENDING)
  disbursedAt              DateTime?
  originatorConversationID String?
  interest                 Float                  @default(0)
  loanType                 LoanType               @default(MONTHLY)
  transactionCharge        Float                  @default(0)
  repaidAmount             Float                  @default(0)
  ConsolidatedRepayment    ConsolidatedRepayment? @relation(fields: [consolidatedRepaymentId], references: [id])
  Organization             Organization           @relation(fields: [organizationId], references: [id])
  Tenant                   Tenant                 @relation(fields: [tenantId], references: [id])
  User                     User                   @relation(fields: [userId], references: [id])
  LoanPayout               LoanPayout[]
}

model LoanPayout {
  id                  Int                  @id @default(autoincrement())
  loanId              Int
  amount              Float
  method              String?
  transactionId       String?
  status              PayoutStatus         @default(PENDING)
  approvedById        Int?
  tenantId            Int
  createdAt           DateTime             @default(now())
  updatedAt           DateTime
  amountRepaid        Float                @default(0)
  User                User?                @relation(fields: [approvedById], references: [id])
  Loan                Loan                 @relation(fields: [loanId], references: [id])
  Tenant              Tenant               @relation(fields: [tenantId], references: [id])
  PaymentConfirmation PaymentConfirmation?
}

model MPESAC2BTransactions {
  id            String      @id
  tenantId      Int
  TransID       String      @unique
  TransTime     DateTime
  ShortCode     String
  TransAmount   Float
  BillRefNumber String
  MSISDN        String
  FirstName     String
  processed     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  MPESAConfig   MPESAConfig @relation(fields: [ShortCode], references: [b2cShortCode], onDelete: Cascade)
  Tenant        Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model MPESAConfig {
  tenantId             Int                    @unique
  b2cShortCode         String                 @unique
  initiatorName        String
  securityCredential   String
  consumerKey          String
  consumerSecret       String
  name                 String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  MPESAC2BTransactions MPESAC2BTransactions[]
  Tenant               Tenant                 @relation(fields: [tenantId], references: [id])
}

model MPesaBalance {
  id                       Int      @id @default(autoincrement())
  resultType               Int
  resultCode               Int
  resultDesc               String
  originatorConversationID String   @unique
  conversationID           String
  transactionID            String
  workingAccountBalance    Float?
  utilityAccountBalance    Float?
  tenantId                 Int
  createdAt                DateTime @default(now())
  updatedAt                DateTime
  mmfBalance               Float    @default(0)
  Tenant                   Tenant   @relation(fields: [tenantId], references: [id])
}

model Organization {
  id                    Int                     @id @default(autoincrement())
  name                  String
  approvalSteps         Int                     @default(1)
  loanLimitMultiplier   Float                   @default(1.0)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  tenantId              Int
  interestRate          Float                   @default(0.1)
  baseInterestRate      Float                   @default(0.10)
  dailyInterestRate     Float                   @default(0.01)
  interestRateType      InterestRateType        @default(MONTHLY)
  status                OrganizationStus        @default(ACTIVE)
  creditBalance         Float                   @default(0.0)
  isGlobalLenderOrg     Boolean                 @default(false)
  ConsolidatedRepayment ConsolidatedRepayment[]
  Employee              Employee[]
  Loan                  Loan[]
  Tenant                Tenant                  @relation(fields: [tenantId], references: [id])
  PaymentBatch          PaymentBatch[]
  User                  User[]
}

model PaymentBatch {
  id                  Int                   @id @default(autoincrement())
  tenantId            Int
  organizationId      Int
  totalAmount         Float
  receivedAt          DateTime              @default(now())
  paymentMethod       String
  reference           String?
  remarks             String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  Organization        Organization          @relation(fields: [organizationId], references: [id])
  Tenant              Tenant                @relation(fields: [tenantId], references: [id])
  PaymentConfirmation PaymentConfirmation[]
}

model PaymentConfirmation {
  id             Int          @id @default(autoincrement())
  paymentBatchId Int
  loanPayoutId   Int          @unique
  amountSettled  Float
  settledAt      DateTime     @default(now())
  LoanPayout     LoanPayout   @relation(fields: [loanPayoutId], references: [id])
  PaymentBatch   PaymentBatch @relation(fields: [paymentBatchId], references: [id])
}

model SMS {
  id          Int       @id @default(autoincrement())
  tenantId    Int
  clientsmsid String    @unique
  mobile      String
  message     String
  status      SMSStatus
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  Tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model SMSConfig {
  id                         Int      @id @default(autoincrement())
  partnerId                  String
  apiKey                     String
  shortCode                  String
  customerSupportPhoneNumber String
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime
  tenantId                   Int      @unique
  Tenant                     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model Tenant {
  id                     Int                     @id @default(autoincrement())
  name                   String
  subscriptionPlan       String
  monthlyCharge          Float
  createdAt              DateTime                @default(now())
  updatedAt              DateTime
  address                String?
  allowedUsers           Int                     @default(1)
  alternativePhoneNumber String?
  building               String?
  county                 String?
  email                  String?
  logoUrl                String?
  phoneNumber            String?
  street                 String?
  town                   String?
  website                String?
  status                 TenantStatus            @default(ACTIVE)
  AuditLog               AuditLog[]
  B2BTransfer            B2BTransfer[]
  ConsolidatedRepayment  ConsolidatedRepayment[]
  Employee               Employee[]
  Loan                   Loan[]
  LoanPayout             LoanPayout[]
  MPESAC2BTransactions   MPESAC2BTransactions[]
  MPESAConfig            MPESAConfig?
  MPesaBalance           MPesaBalance[]
  Organization           Organization[]
  PaymentBatch           PaymentBatch[]
  SMS                    SMS[]
  SMSConfig              SMSConfig?
  TransactionCostBand    TransactionCostBand[]
  User                   User[]
}

model TransactionCostBand {
  id        Int    @id @default(autoincrement())
  tenantId  Int
  minAmount Float
  maxAmount Float
  cost      Float
  Tenant    Tenant @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, minAmount, maxAmount])
  @@index([tenantId])
}

model User {
  id                    Int                     @id @default(autoincrement())
  organizationId        Int                     @default(0)
  firstName             String
  lastName              String
  phoneNumber           String                  @unique
  email                 String?                 @unique
  county                String?
  town                  String?
  gender                String?
  password              String
  tenantName            String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  lastLogin             DateTime?
  loginCount            Int                     @default(0)
  role                  String[]
  tenantId              Int
  createdBy             Int?
  employeeId            Int?                    @unique
  mfaEnabled            Boolean                 @default(false)
  otpAttempts           Int                     @default(0)
  resetCode             String?
  resetCodeExpiresAt    DateTime?
  status                UserStatus              @default(ACTIVE)
  AuditLog              AuditLog[]
  ConsolidatedRepayment ConsolidatedRepayment[]
  Loan                  Loan[]
  LoanPayout            LoanPayout[]
  Employee              Employee?               @relation(fields: [employeeId], references: [id])
  Organization          Organization            @relation(fields: [organizationId], references: [id])
  Tenant                Tenant                  @relation(fields: [tenantId], references: [id])
}

enum B2BStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
}

enum InterestRateType {
  MONTHLY
  DAILY
}

enum LoanStatus {
  PENDING
  APPROVED
  REJECTED
  REPAID
  DISBURSED
  PPAID
}

enum LoanType {
  DAILY
  MONTHLY
}

enum OrganizationStus {
  ACTIVE
  SUSPENDED
  PENDING
}

enum PayoutStatus {
  PENDING
  DISBURSED
  FAILED
  REPAID
  PPAID
}

enum SMSStatus {
  PENDING
  SENT
  FAILED
  DELIVERED
}

enum TenantStatus {
  ACTIVE
  DISABLED
}

enum UserStatus {
  ACTIVE
  DISABLED
}